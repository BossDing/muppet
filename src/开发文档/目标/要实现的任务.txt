
1.5版本
1.监听器 90%  
	监听器实现内部的解耦
	过滤器  30%
	过滤器实现调用方对数据库操作的灵活操作
2.事务控制  0%
	实现安全
3.内部AOP   完成70%
	实现内部的解耦
4.视图支持.分表实现 0%
	常用功能实现
	分表之后的分页，查询如何提供默认实现
	http://blog.csdn.net/cxzhq2002/article/details/49279199
	http://www.blogjava.net/weishuangshuang/archive/2011/03/26/347080.html
	http://blog.csdn.net/hhq163/article/details/6219221
	http://blog.csdn.net/column/details/sharding.html
 5：实现数据表自动生成实体类工具开发   （完成80%）
 
 
 muppet 1.5新增功能如下：
  1.事务控制
  2、AOP
  3.数据表自动生成实体类
  4.查询工具类。
 
 事务控制
   SessionFactory factroy = new SessionFactory("muppet.xml");//创建sessionfactory，传入参数是配置文件的路径，实例配置文件见下
   Session session = factroy.getSession(false);//创建Session,false代表关闭自动提交
   Transaction transaction = null;
   try{
		 transaction = session.beginTransaction();//开始事务
		 ///执行增删查改方法。
		 transaction.commit();//提交事务
   }catch(SQLException e){
		 if(transaction!=null){
			transaction.rollback();//回滚事务
		 }
   }finally{
		 session.close();//关闭session
   }
   
   
  反射及Aop工具包：
      如果你想在你项目中使用动态代理某个类，那么使用我们的工具包，你只要需要实现JDK  InvocationHandle接口既可以，
	  与jdk  Proxy类提供的只能对接口代理，使用ReflectUtil类可以透明的对类，接口代理，只需要实现同一个接口InvocationHandle。这个
	  接口是jdk自带的，所以当你想法自己实现aop的时候，直接替换掉ReflectUtil类即可，不用更改代理增强类（实现InvocationHandle接口的类）的逻辑。
			对类代理	ReflectUtil.getClassProxy(new A(),new ClosedInvocationHandler());
			对接口代理  ReflectUtil.getProxy(new A(),new ClosedInvocationHandler());
      分别A对象代理，只不过一个是对接口代理，一个对类代理。具体详细使用及原理参考  微信公众平台 IT之路  历史消息
      其他常用反射方法也封装在ReflectUtil类中
  数据表实体类自动生成：
    执行一行代码输入配置文件
		AutoGenerateUtil.generate("muppet.xml");
     
	 配置文件只需要有
	 
	 <!--配置数据源-->
	 <datasource>
		<url value="jdbc:mysql://localhost:3306/study?Unicode=true"/>
	</datasource>
	 
	 <table tableName="tb_bloghouse" domainObjectName="BlogHouse"></table><!--指定哪些表需要自动生成，以及生成的javabean的名字-->
	 <generate packageName="cn.bronzeware.test1"></generate><!--在哪个包下生成-->
   Criteria查询工具类
		SessionFactory factroy = new SessionFactory("muppet.xml");//创建sessionfactory，传入参数是配置文件的路径，实例配置文件见下
		Session session = factroy.getSession(false);//创建Session,false代表关闭自动提交
		Criteria criteria = session.createCriteria(Note.class);//创建工具查询
		//criteria.andPropEqual("id", 37);//相等
		//criteria.andPropGreater("id", 36);//大于
		//criteria.andPropGreaterEq("id", 39);//大于等于
		//criteria.andPropGreater("id", 36).order("user_id", false).order("id", false);//排序，链式调用
		//criteria.andPropLess("id", 37);//小于
		criteria.andPropGreater("user_id", 30);//大于
		criteria.andPropLike("username", "%yuhai1%");//like
		criteria.or(criteria1);//or,连接两个查询，做or连接
		System.out.print(criteria.list());//查询结果，返回结果集
    分表：
	  分表截止目前，还没有实现，原因一是；实现分表需要用加入过滤器链，层层拦截请求，但是添加了过滤器对原有的系统的侵入太大，降低了稳定性，大大增加了难度。原因二：由于分表之后的查询多种多样，join,group by ,order的支持（还在想，到底支持不支持这些操作）等，目前实现起来比较困难。
	  目前的想法是先使用本框架开发一个分表应用，但是分表是在框架之上，与之前的设计作比较，哪种实现可行性高，稳定性，效率高，最后在决定使用哪种方式。
 
 1.6版本
 内部IOC